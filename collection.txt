collection framework ---------------
									i)collection interface
									ii)map inetrface
									iii)iterator interface




collection interface-------------------
									i)List
										a)ArrayList
										b)LinkedList
										c)Stack
										d)Vector(less used)
									
									ii)Set
										a)EnumSet(less used)
										b)HashSet
										c)LinkedHAshSet
										d)TreeSet
									
									iii)Queue
										a)ArrayQueue
										b)LinkedList
										c)PriorityQueue
										
										
							
									
Map Interface------------------------------
									i)HashMap
									ii)TreeMap
									iii)EnumMap(less used)
									iv)LinkedHashMap
									v)WeakHashMap
									
									
									
Iterator Interface------------------------------
									i)ListIterator
									
						


ArrayList------------>
	Array te dynamically size change kora jay na mane suppose 30 size  r
    ekta array create kore6ilam and all the elements are placed amra jodi
    31st kono element push korte jai then it will show an error.

	But amra arraylist e dynamically size change korte pari.Eta internally array use kor6e.
	
	syntax-> ArrayLust<data_type> variable_name = new ArrayList<>();
	         jokhn eta likhlam eta memory te ekta empty array create kor6e.
			 size increament hye n theke (n+n/2+1) aspect e.
	
	example-> ArrayList<String> studentsName = new ArrayList<>();
	
	.add() is used to add an element in the list and it always adds the element in the end.
	
	to add an element at a given index we have to use .add(index,element) but here method overloading is happening 
	and we have to pass the given index and the element to be pushed.
	
	by using addAll(newList) function we can add an list or arrayList to an already existing list.
	
	to get an element from the list we have to use .get(index) method it returns the element present in that index of the list.
	
	to remove an element .remove(index) & it removes the elelment present in that index
	
	to remove an element by integer we have to use .remove(Ineger.valueOf(element))
	
	to clear all the elements in the list we have to use .clear()
	
	.remove() & .add() & .contains() takes O(n)
	
	to update value of an index we have to use .set(index,element) it says that lists are mutable too.
	
	to check whether an element is present in the list or not we have to use .contains(element)
	
	.size() returns no of elements present in the list
	
	
Iterator---------------->
	to iterate an list
	.hasNext() returns whether there is an element present in the list or not
	.next() returns the next element
	
	
Stack-------------------->

	here an element is added or removed from the upper position of the diagram means it works in LIFO.
	.push(element) is used to push an element 
	.peek() returns the top element in thhe stack
	.pop() is used to remove the topmost element from the stack
	
	
LinkedList------------------->

	it's under both list & Queue interface. It's an class that helps both the interfaces to implement them.
	
Queue-------------------------->
	works based on LIFO.
	ticket counter.
	Deletion hy front theke where as Addition hy rear theke.
	syntax-> Queue<Integer> queue=new LinkedList<>();
	.offer() is used to insert an element in the list
	.poll() returns and removes head of the queue 
    .add() inserts the specified element into the queue ,if the task is successful & it returns true if not it throws an exception.
	.element() returns the head of the queue & it throws an exception if the list is empty
	.peek() returns head of the queue & returns null if the queue is empty
	.remove() returns and removes head of the queue & throws an exception if the queue is empty


priority queue------------------>
	it helps to implement min heap,max heap etc.
	it priorities a specific element in the queue  
	All the functions that are existed in queue is present here too.

	Queue<Integer> pq= new PriorityQueue<>(); it implements a min heap 
	where as Queue<Integer> pq= new PriorityQueue<>(Comparator.reverseOrder()); it implements a max heap
	in case of min heap the first element is always the minimum one & the rest is in random Order
	in case of max heap the first element is always the maximum one & the rest is in random Order


ArrayDeque-------------------------->

	in case of stcak & queue we can insert an element from one side only but in case of this we have the permission to get
	 & set elements from both the side of a queue.
	sliding window te eta apply kora hy mainly.
	Etao jehetu queue r i ekta part tai eteo smae function gulo kaj kobe.
	.offerFirst() starting position e element add korbe
	.offerFirst() last position e element add korbe


hashSet------------------------------->

	duplicate elements are not allowed.
	while printing out the elements present in the set in does not maintain the order of adding the elements init
	But linkedHashSet maintains the order
	And to the get the elements in sorted order we use tree set
	all the  functions of hashSet takes O(1)
	all the  functions of treeSet takes O(log n)

set of Custom class------------------------->

	suppose if we want to build a custom set rather than using a primitive data type then  amra jodi 2 to same details r set create 
	kori ta sotteo segulo set r modhye stored hye jbe where as jodi amra .equals() die dekhte pabo that elemnt is already presnt or not

map------------------------------->
	key,value pair;
	keys are unique
	ekhnae same key er jodi different value r new element add kori then override will happen



Every classes are children of object class